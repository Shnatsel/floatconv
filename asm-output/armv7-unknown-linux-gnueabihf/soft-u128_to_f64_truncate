floatconv::soft::u128_to_f64_truncate:
 push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 clz     r6, r2
 cmp     r3, #0
 add     r4, r6, #32
 clz     r6, r0
 clzne   r4, r3
 add     r6, r6, #32
 cmp     r1, #0
 clzne   r6, r1
 orrs    r5, r2, r3
 addeq   r4, r6, #64
 and     r12, r4, #127
 rsb     r10, r12, #32
 rsb     r5, r12, #96
 subs    r8, r12, #32
 rsb     r9, r12, #64
 lsr     r6, r2, r10
 orr     r7, r6, r3, lsl, r12
 sub     r11, r12, #64
 lslpl   r7, r2, r8
 lsr     r5, r0, r5
 lsr     r6, r1, r9
 cmp     r10, #0
 orr     lr, r5, r1, lsl, r11
 movwpl  r6, #0
 subs    r5, r12, #96
 lslpl   lr, r0, r5
 cmp     r12, #64
 orrlo   lr, r7, r6
 cmp     r12, #0
 moveq   lr, r3
 orr     r3, r1, r3
 lsr     r6, lr, #11
 sub     r4, r6, r4, lsl, #20
 orr     r6, r0, r2
 add     r4, r4, #131072000
 orrs    r3, r6, r3
 rsb     r6, r9, #32
 lsr     r3, r0, r9
 add     r4, r4, #1073741824
 lsreq   r4, lr, #11
 orr     r3, r3, r1, lsl, r6
 cmp     r10, #0
 lsl     r0, r0, r11
 lsrpl   r3, r1, r10
 lsl     r1, r2, r12
 cmp     r8, #0
 movwpl  r1, #0
 cmp     r5, #0
 movwpl  r0, #0
 cmp     r12, #64
 orrlo   r0, r1, r3
 cmp     r12, #0
 moveq   r0, r2
 lsr     r0, r0, #11
 orr     r0, r0, lr, lsl, #21
 vmov    d0, r0, r4
 pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
