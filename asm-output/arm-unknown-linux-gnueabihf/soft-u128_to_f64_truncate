floatconv::soft::u128_to_f64_truncate:
 push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 clz     r6, r2
 cmp     r3, #0
 add     r12, r6, #32
 clz     r6, r0
 clzne   r12, r3
 add     r6, r6, #32
 cmp     r1, #0
 clzne   r6, r1
 orrs    r5, r2, r3
 addeq   r12, r6, #64
 and     lr, r12, #127
 rsb     r5, lr, #32
 rsb     r9, lr, #64
 subs    r8, lr, #32
 sub     r10, lr, #64
 lsr     r4, r2, r5
 orr     r7, r4, r3, lsl, lr
 rsb     r4, lr, #96
 lslpl   r7, r2, r8
 lsr     r6, r1, r9
 cmp     r5, #0
 lsr     r4, r0, r4
 movpl   r6, #0
 subs    r11, lr, #96
 orr     r4, r4, r1, lsl, r10
 lslpl   r4, r0, r11
 cmp     lr, #64
 orrlo   r4, r7, r6
 cmp     lr, #0
 moveq   r4, r3
 orr     r3, r1, r3
 lsr     r6, r4, #11
 sub     r7, r6, r12, lsl, #20
 orr     r6, r0, r2
 add     r7, r7, #131072000
 orrs    r3, r6, r3
 rsb     r6, r9, #32
 lsr     r3, r0, r9
 add     r12, r7, #1073741824
 lsreq   r12, r4, #11
 orr     r3, r3, r1, lsl, r6
 cmp     r5, #0
 lsl     r0, r0, r10
 lsrpl   r3, r1, r5
 lsl     r1, r2, lr
 cmp     r8, #0
 movpl   r1, #0
 cmp     r11, #0
 movpl   r0, #0
 cmp     lr, #64
 orrlo   r0, r1, r3
 cmp     lr, #0
 moveq   r0, r2
 mov     r1, r12
 lsr     r0, r0, #11
 orr     r0, r0, r4, lsl, #21
 pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
